{"version":3,"sources":["app/models/pagination.ts","app/api/agents.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commomStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/navBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponents.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivitiyDetailedHeader.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilesPhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelDateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","runInAction","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","storeContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","collor","active","has","onChange","Reveal","animated","Content","visible","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInpun","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationError","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInpun","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInpun","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","relaxed","divided","Extra","ActivityDetailedSideBar","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfilesPhotos","menuPosition","Statistic","followingCount","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.c10bba21.chunk.js","sourcesContent":["export interface Pagination{\r\n    currentPage: number;\r\n    itensPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor( data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams{\r\n    pageNumber;\r\n    pageSize; \r\n\r\n    constructor(pageNumber = 1, pageSize = 2,) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n        return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        await sleep(1000);\r\n    }\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === \"string\") {\r\n                toast.error(data);\r\n            }\r\n            if (config.method ==='get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modelDateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modelDateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modelDateErrors.flat()\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n           store.commonStore.setServerError(data);\r\n           history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account ={\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file : Blob) => {\r\n        let formData = new FormData()\r\n        formData.append('File', file)\r\n        return axios.post<Photo>('photos', formData,{\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        } )\r\n    },\r\n\r\nsetMainPhoto:(id: string) => requests.post(`/photos/${id}/setMain`,{}),\r\ndeletePhoto:(id: string) => requests.del(`/photos/${id}`),\r\nupdateProfile:(profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\nupdateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\nlistFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\nlistActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`) \r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\nexport class Activity implements Activity{\r\n    constructor(init? : ActivityFormValues){\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues{\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues){\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}\r\n","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile{\r\n    constructor(user: User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo{\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity{\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agents\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams =(pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) =>{\r\n               if (key !== 'startDate') {\r\n                   this.predicate.delete(key);\r\n               }\r\n            })\r\n        }\r\n        switch(predicate){\r\n            case 'all' :\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true)\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true)\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n    get axiosParams () {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString())\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            }else{\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n        a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format (activity.date!, 'dd MMMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                runInAction(() => {\r\n                    this.setActivity(activity);\r\n                });\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.setLoadingInitial(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                runInAction(() => {\r\n                    this.setLoadingInitial(false);\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(a => a.username === user.username);\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n    \r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!)\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees =  [attendee];\r\n            this.setActivity(newActivity);\r\n\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                   let updatedActivity = {...this.getActivity(activity.id), ...activity }\r\n                   this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                   this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n            if(this.selectedActivity?.isGoing) {\r\n                this.selectedActivity.attendees =\r\n                    this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                this.selectedActivity.isGoing = false;\r\n            }\r\n            else{\r\n                const attendee = new Profile(user!);\r\n                this.selectedActivity?.attendees?.push(attendee);\r\n                this.selectedActivity!.isGoing = true;\r\n            }\r\n            this.activityRegistry.set(this.selectedActivity!.id , this.selectedActivity! )\r\n        })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }finally{\r\n            runInAction(() => this.loading = false);\r\n        }\r\n\r\n    }\r\n    cancelActivityToggle= async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally{\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity =>{\r\n            activity.attendees.forEach(attendee =>{\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agents\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore{\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n    \r\n    constructor() {\r\n       makeAutoObservable(this);\r\n\r\n       reaction(\r\n           () => this.activeTab, \r\n           activeTab => {\r\n               if (activeTab === 3 || activeTab === 4 ) {\r\n                   const predicate = activeTab === 3 ? 'followers' : 'followings';\r\n                   this.loadFollowings(predicate);\r\n               } else{\r\n                   this.followings = [];\r\n               }\r\n           }\r\n       )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser(){\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username : string) => {\r\n        this.loadingProfile = true;\r\n\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n                const response = await agent.Profiles.uploadPhoto(file);\r\n                const photo = response.data;\r\n                runInAction(() => {\r\n                    if (this.profile) {\r\n                        this.profile.photos?.push(photo);\r\n                        if (photo.isMain && store.userStore.user) {\r\n                            store.userStore.setImage(photo.url);\r\n                            this.profile.image = photo.url;\r\n                        }\r\n                    }\r\n                })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n        this.uploading = false;\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false)\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false)\r\n            console.log(error)\r\n        }\r\n    }\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        }\r\n        catch (error) {\r\n                console.log(error)\r\n                runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following; \r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings =  await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(()  => {\r\n                this.loadingFollowings = false;\r\n            })\r\n        }\r\n    }\r\n    loadUserActivities = async (username: string, predicate?: string ) =>{\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() =>{\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n            \r\n        }\r\n    }\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agents\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\nimport { history } from \"../..\";\r\n\r\nexport default class UserStore{\r\n    user: User | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        console.log(\"user is already logged in\")\r\n        return !!this.user;\r\n    }\r\n    \r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities')\r\n            store.modalStore.closeModal();\r\n            console.log(user);\r\n        } catch (error) {\r\n            console.log('Error occurred while trying to login ' + error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try{\r\n        const user = await agent.Account.current();\r\n        runInAction(() => this.user = user);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities')\r\n            store.modalStore.closeModal();\r\n            console.log(user);\r\n        }catch (error) {\r\n            console.log('Error occurred while trying to register ' + error);;\r\n            throw error;\r\n        }\r\n    }\r\n    setImage = (image: string) => {\r\n        if (this.user) {\r\n            this.user.image = image;\r\n        }\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) {\r\n            this.user.displayName = name;\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commomStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore:ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const storeContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(storeContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                }else{\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {this.token = token;}\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal{\r\n    open: boolean,\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore{\r\n    modal: Modal ={\r\n        open: false,\r\n        body: null\r\n\r\n    }\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction} from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore{\r\n    comments: ChatComment[] = [];\r\n    hubConnection : HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_CHAT_URL +'?activityId=' + activityId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing connection', error));\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                       comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) =>{\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown} from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer (function NavBar() {\r\n    const {userStore : {user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to= '/' exact header>\r\n                    <img src='assets/logo.png' alt='logo' style={{marginRight: 10}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to= '/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to= '/errors' name='Errors' />\r\n                <Menu.Item>\r\n                <Button  as={NavLink} to= '/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='MyProfile' icon='user'/>\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer (function ActivityFilters(){\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return(\r\n        <>\r\n            <Menu vertical size=\"large\" style={{width:'100%', marginTop:'28px'}}>\r\n                <Header icon= 'filter' attached collor='teal' content= 'Filters'/>\r\n                <Menu.Item \r\n                content='All activities'\r\n                active={predicate.has('all')}\r\n                onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                content=\"I`m going\"\r\n                active={predicate.has('isGoing')}\r\n                onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                content=\"I'm hosting\"\r\n                active={predicate.has('isHost')}\r\n                onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n            onChange={(date: Date) => setPredicate('startDate', date as Date)}\r\n            value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading  } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) {\r\n        return null;\r\n    }\r\n    function handleFollow(e: SyntheticEvent, username: string){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                fluid color='teal' \r\n                content={profile.following ? 'Following' : 'Not Following'} \r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading} \r\n                    onClick={(e) => handleFollow(e, profile.username) }\r\n                    />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\nprofile: Profile;\r\n}\r\n\r\n\r\nexport default observer (function ProfileCard({profile} : Props){\r\n\r\n    function truncate(str: string | undefined){\r\n        if (str) {\r\n            return str?.length > 40 ? str?.substring(0, 37) + '...': str;\r\n        }\r\n    }\r\n    return(\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || `/assets/user.png`}/>\r\n                 <Card.Content>\r\n                    <Card.Header>{profile.displayName}</Card.Header>\r\n                    <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Icon name='user'/>\r\n                   {profile.followersCount} followers\r\n                </Card.Content>\r\n                <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { List, Image, Popup } from \"semantic-ui-react\"\r\nimport { Profile } from \"../../../app/models/profile\"\r\nimport ProfileCard from \"../../profiles/ProfileCard\"\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                            size='mini' \r\n                            circular src={attendee.image || '/assets/user.png'} \r\n                            bordered\r\n                            style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}> {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`} >{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are attending this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format (activity.date!, 'dd MMMM yyyy H:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                < Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) =>\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            )}\r\n        </>\r\n    )\r\n})\r\n","import { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size === 0) loadActivities();\r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name : string;\r\n    type?: string;\r\n    label? : string;\r\n}\r\n\r\nexport default function MyTextInpun(props : Props){\r\n    const [field, meta] = useField(props.name)\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {... field } {... props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'> {meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInpun from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer (function LoginForm(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error =>\r\n                setErrors({error: 'Invalid email or password'}))}\r\n            >\r\n                {({handleSubmit, isSubmitting, errors}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\r\n                       <MyTextInpun name='email' placeholder='Email' />\r\n                       <MyTextInpun name='password' placeholder='password' type='password' />\r\n                       <ErrorMessage\r\n                            name='error' render={() =>\r\n                            <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>} />\r\n                       <Button loading={isSubmitting} positive content='Login' type=\"submit\" fluid/>\r\n                    </Form>\r\n                )}\r\n        </Formik>\r\n    )\r\n})","import { Message } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationError({errors}: Props) {\r\n    return(\r\n        <Message error>\r\n            {errors &&(\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) =>(\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInpun from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer (function RegisterForm(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error =>\r\n                setErrors({error}))}\r\n                validationSchema = {Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string().required(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required(),\r\n                })}\r\n            >\r\n                {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                    <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center'/>\r\n                       <MyTextInpun name='displayName' placeholder='Display Name' />\r\n                       <MyTextInpun name='username' placeholder='Username' />\r\n                       <MyTextInpun name='email' placeholder='Email' />\r\n                       <MyTextInpun name='password' placeholder='Password' type='password' />\r\n                       <ErrorMessage\r\n                            name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                      />\r\n                       <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type=\"submit\" fluid/>\r\n                    </Form>\r\n                )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted vertical className=\"masthead\">\r\n            <Container text>\r\n                <Header as='h1' inverted textAlign='center'>\r\n                    <Image size='massive' src='/assets/logo.png' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header >\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' textAlign='center' inverted content='Welcome to Reactivities!' />\r\n                        <Button textAlign='center' as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!!!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true, content= 'Loading...'}: Props) {\r\n    return(\r\n        <Dimmer active= {true} inverted={inverted}>\r\n        <Loader content={content} />\r\n        </ Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name : string;\r\n    rows: number;\r\n    label? : string;\r\n}\r\n\r\nexport default function MyTextArea(props : Props){\r\n    const [field, meta] = useField(props.name)\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {... field } {... props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'> {meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name : string;\r\n    options : any;\r\n    label? : string;\r\n}\r\n\r\nexport default function MySelectInpun(props : Props){\r\n    const [field, meta, helpers] = useField(props.name)\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder\r\n                }\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'> {meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from \"react-datepicker\";\r\n\r\n\r\n\r\n\r\nexport default function MyDateInpun(props : Partial<ReactDatePickerProps>){\r\n    const [field, meta, helpers] = useField(props.name!)\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n            {...field}\r\n            {...props}\r\n            selected={((field.value && new Date(field.value)) || null)}\r\n            onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'> {meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport MyTextInpun from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInpun from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInpun from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\nimport { v4 as uuid } from 'uuid'\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>()\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity!)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid(),\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} >\r\n                        <MyTextInpun name='title' placeholder=\"Title\" />\r\n                        <MyTextArea rows={3} placeholder=\"Description\" name='description' />\r\n                        <MySelectInpun options={categoryOptions} placeholder=\"Category\" name='category' />\r\n                        <MyDateInpun\r\n                            placeholderText=\"Date\"\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM dd yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInpun placeholder=\"City\" name='city' />\r\n                        <MyTextInpun placeholder=\"Venue\" name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated='right'\r\n                            positive type='submit'\r\n                            content='Submit' />\r\n                        <Button\r\n                            as={Link}\r\n                            to='/activities'\r\n                            floated='right'\r\n                            type='button'\r\n                            content='Cancel'\r\n                        />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button\r\n                        loading={loading}\r\n                        onClick={updateAttendance}>Cancel attendance\r\n                    </Button>\r\n                ) : (\r\n                    <Button\r\n                        disabled={activity.isCancelled}\r\n                        loading={loading}\r\n                        onClick={updateAttendance}\r\n                        color='teal'>Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport { formatDistanceToNow } from 'date-fns/esm'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter to submit, SHIFT + enter for new line'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format (activity.date!, 'dd MMM yyyy H:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity : Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity : {attendees, host} }: Props) {\r\n    if (!attendees) {\r\n        return  null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                    {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport {  Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedHeader from \"./ActivitiyDetailedHeader\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSideBar from \"./ActivityDetailedSideBar\";\r\n\r\nexport default observer(function ActivityDetails() {\r\n  const { activityStore } = useStore();\r\n  const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n  const { id } = useParams<{ id: string }>();\r\n\r\n  useEffect(() => {\r\n    if (id) loadActivity(id);\r\n    return () => clearSelectedActivity();\r\n  }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n  if (loadingInitial || !activity) return <LoadingComponent />;\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityDetailedHeader activity={activity} />\r\n        <ActivityDetailedInfo activity={activity}/>\r\n        <ActivityDetailedChat activityId={activity.id}/>\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityDetailedSideBar activity={activity} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n})","import { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            { errors &&\r\n            <ValidationErrors errors={errors}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound(){\r\n    return(\r\n        <Segment placeholder>\r\n            <Header>\r\n                <Icon name='search' />\r\n                Well, we've looked everywhere and could not find this\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                Return to activity page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer (function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return(\r\n        <Container>\r\n            <Header as='h1' content='ServerError'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal'/>\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer (function ModalContainer(){\r\n    const {modalStore} = useStore();\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Formik, Form } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useStore } from '../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { Button} from 'semantic-ui-react';\r\nimport MyTextInpun from '../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\n\r\ninterface Props{\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\nexport default observer (function ProfileEditForm({setEditMode}: Props){\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    \r\n    return (\r\n        <Formik\r\n        initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n        onSubmit={values => {\r\n            updateProfile(values).then(() => {\r\n                setEditMode(false);\r\n            })\r\n        }}\r\n        validationSchema={Yup.object({\r\n            displayName: Yup.string().required()\r\n        })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInpun placeholder='Display Name' name='displayName'/>\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio'/>\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </ Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}> {profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { SyntheticEvent, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    {menuItem: 'Future Events', pane: {key: 'future'}},\r\n    {menuItem: 'Past Events', pane: {key: 'past'}},\r\n    {menuItem: 'Hosting', pane: {key: 'hosting'}},\r\n];\r\n\r\nexport default observer (function ProfileActivities() {\r\n    const {profileStore} = useStore();\r\n    const{loadUserActivities,profile, loadingActivities, userActivities} = profileStore;\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n           \r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    },[loadUserActivities, profile]);\r\n\r\n    return (\r\n            <Tab.Pane loading={loadingActivities}>\r\n                <Grid>\r\n                    <Grid.Column width={16}>\r\n                        <Header floated='left' icon='calendar'content={'Activities'}/>\r\n                    </ Grid.Column>\r\n                    <Grid.Column width={16}>\r\n                        <Tab panes={panes} menu={{secondary: true, pointing: true}} onTabChange={(e, data) => handleTabChange(e, data)}/>\r\n                        <br />\r\n                        <Card.Group itemsPerRow={4}>\r\n                            {userActivities.map((activity: UserActivity) => (\r\n                                <Card as={Link} to={`/activities/${activity.id}`} key={activity.id}>\r\n                                        <Image src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                               style={{minHeight: 100, objectFit:'cover'}}\r\n                                        />\r\n                                        <Card.Content>\r\n                                            <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                            <Card.Meta textAlign='center'>\r\n                                                <div> {format(new Date(activity.date), 'do LLL')}</div>\r\n                                                <div> {format(new Date(activity.date), 'h:mm a')}</div>\r\n                                            </Card.Meta>\r\n                                        </Card.Content>\r\n                                </Card>\r\n                                ))}\r\n                        </Card.Group>\r\n                </Grid.Column>\r\n                </Grid>\r\n                </Tab.Pane>\r\n            );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer (function ProfileFollowings(){\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return(\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                    floated='left' \r\n                    icon='user' \r\n                    content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile}/>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import {Cropper} from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props{\r\n    imagePreview: string;\r\n    setCropper:(cropper: Cropper) => void;\r\n}\r\n\r\nexport  default function PhotoWidgetCropper({imagePreview, setCropper}: Props){\r\n    return(\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge'/>\r\n            <Header content='Drop image here'/>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props{\r\n    loading: boolean;\r\n    uploadPhoto:(file: Blob) => void;\r\n\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto} : Props){\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop(){\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() =>{\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    },[files])\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo'/>\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image'/>\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload'/>\r\n                {files && files.length > 0 &&\r\n                <>\r\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\r\n                <Button.Group widths={2}>\r\n                    <Button loading={loading} onClick={onCrop} positive icon='check'/>\r\n                    <Button disabled={loading} onClick={() => setFiles([])}  icon='close'/>\r\n                </Button.Group>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob){\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser &&\r\n                                    <Button.Group>\r\n                                        <Button\r\n                                            basic\r\n                                            color='green'\r\n                                            content='Main'\r\n                                            name={'main' + photo.id}\r\n                                            disabled={photo.isMain}\r\n                                            loading={target === 'main' + photo.id && loading}\r\n                                            onClick={ e => handleSetMainPhoto(photo, e)}\r\n                                        />\r\n                                        <Button\r\n                                            basic color='red'\r\n                                            icon='trash'\r\n                                            loading={target === photo.id && loading}\r\n                                            onClick={ e => handleDeletePhoto(photo, e)}\r\n                                            disabled={photo.isMain}\r\n                                            name={photo.id}\r\n                                            />\r\n                                    </Button.Group>\r\n                                    }\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilesPhotos from \"./ProfilesPhotos\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer (function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilesPhotos profile={profile}/>},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\r\n    ];\r\n\r\n    return(\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition= 'right'\r\n            panes={panes}\r\n            onTabChange={(e, data) =>  profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport {Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponents\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer (function ProfilePage(){\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n    \r\n    if (loadingProfile) {\r\n        return <LoadingComponent content='Loading profile ...'/>\r\n    }\r\n    \r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                <>\r\n                <ProfileHeader profile={profile} />\r\n                <ProfileContent profile={profile} />\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props){\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return(\r\n        <Route \r\n        {...rest}\r\n        render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/'/>}\r\n        />\r\n    )\r\n}","\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './navBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponents';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    }else{\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) {\n    return <LoadingComponent content='App is not loading' />\n  }\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <Route path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}\r\n","import ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, storeContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <storeContext.Provider value= {store}>\n    <Router history={history}>\n      <ScrollToTop/>\n      <App />\n    </Router>\n  </storeContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}