{"version":3,"sources":["app/models/pagination.ts","app/api/agents.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commomStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/navBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponents.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivitiyDetailedHeader.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilesPhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelDateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","runInAction","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","loadFollowings","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","storeContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","collor","active","has","onChange","Reveal","animated","Content","visible","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInpun","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationError","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInpun","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInpun","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","relaxed","divided","Extra","ActivityDetailedSideBar","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","itemsPerRow","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","ProfilesPhotos","menu","menuPosition","onTabChange","activeIndex","Statistic","followingCount","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.d77d7766.chunk.js","sourcesContent":["export interface Pagination{\r\n    currentPage: number;\r\n    itensPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor( data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams{\r\n    pageNumber;\r\n    pageSize; \r\n\r\n    constructor(pageNumber = 1, pageSize = 2,) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n        return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        await sleep(1000);\r\n    }\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === \"string\") {\r\n                toast.error(data);\r\n            }\r\n            if (config.method ==='get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modelDateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modelDateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modelDateErrors.flat()\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n           store.commonStore.setServerError(data);\r\n           history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account ={\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file : Blob) => {\r\n        let formData = new FormData()\r\n        formData.append('File', file)\r\n        return axios.post<Photo>('photos', formData,{\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        } )\r\n    },\r\n\r\nsetMainPhoto:(id: string) => requests.post(`/photos/${id}/setMain`,{}),\r\ndeletePhoto:(id: string) => requests.del(`/photos/${id}`),\r\nupdateProfile:(profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\nupdateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\nlistFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\nexport class Activity implements Activity{\r\n    constructor(init? : ActivityFormValues){\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues{\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues){\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}\r\n","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile{\r\n    constructor(user: User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo{\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agents\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams =(pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) =>{\r\n               if (key !== 'startDate') {\r\n                   this.predicate.delete(key);\r\n               }\r\n            })\r\n        }\r\n        switch(predicate){\r\n            case 'all' :\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true)\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true)\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n    get axiosParams () {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString())\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            }else{\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n        a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format (activity.date!, 'dd MMMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                runInAction(() => {\r\n                    this.setActivity(activity);\r\n                });\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.setLoadingInitial(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                runInAction(() => {\r\n                    this.setLoadingInitial(false);\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(a => a.username === user.username);\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n    \r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!)\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees =  [attendee];\r\n            this.setActivity(newActivity);\r\n\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                   let updatedActivity = {...this.getActivity(activity.id), ...activity }\r\n                   this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                   this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n            if(this.selectedActivity?.isGoing) {\r\n                this.selectedActivity.attendees =\r\n                    this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                this.selectedActivity.isGoing = false;\r\n            }\r\n            else{\r\n                const attendee = new Profile(user!);\r\n                this.selectedActivity?.attendees?.push(attendee);\r\n                this.selectedActivity!.isGoing = true;\r\n            }\r\n            this.activityRegistry.set(this.selectedActivity!.id , this.selectedActivity! )\r\n        })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }finally{\r\n            runInAction(() => this.loading = false);\r\n        }\r\n\r\n    }\r\n    cancelActivityToggle= async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally{\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity =>{\r\n            activity.attendees.forEach(attendee =>{\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agents\";\r\nimport { Photo, Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore{\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    \r\n    constructor() {\r\n       makeAutoObservable(this);\r\n\r\n       reaction(\r\n           () => this.activeTab, \r\n           activeTab => {\r\n               if (activeTab === 3 || activeTab === 4 ) {\r\n                   const predicate = activeTab === 3 ? 'followers' : 'followings';\r\n                   this.loadFollowings(predicate);\r\n               } else{\r\n                   this.followings = [];\r\n               }\r\n           }\r\n       )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser(){\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username : string) => {\r\n        this.loadingProfile = true;\r\n\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n                const response = await agent.Profiles.uploadPhoto(file);\r\n                const photo = response.data;\r\n                runInAction(() => {\r\n                    if (this.profile) {\r\n                        this.profile.photos?.push(photo);\r\n                        if (photo.isMain && store.userStore.user) {\r\n                            store.userStore.setImage(photo.url);\r\n                            this.profile.image = photo.url;\r\n                        }\r\n                    }\r\n                })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n        this.uploading = false;\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false)\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false)\r\n            console.log(error)\r\n        }\r\n    }\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        }\r\n        catch (error) {\r\n                console.log(error)\r\n                runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following; \r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings =  await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(()  => {\r\n                this.loadingFollowings = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agents\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\nimport { history } from \"../..\";\r\n\r\nexport default class UserStore{\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        console.log(\"user is already logged in\")\r\n        return !!this.user;\r\n    }\r\n    \r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities')\r\n            store.modalStore.closeModal();\r\n            console.log(user);\r\n        } catch (error) {\r\n            console.log('Error occurred while trying to login ' + error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try{\r\n        const user = await agent.Account.current();\r\n        runInAction(() => this.user = user);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities')\r\n            store.modalStore.closeModal();\r\n            console.log(user);\r\n        }catch (error) {\r\n            console.log('Error occurred while trying to register ' + error);;\r\n            throw error;\r\n        }\r\n    }\r\n    setImage = (image: string) => {\r\n        if (this.user) {\r\n            this.user.image = image;\r\n        }\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) {\r\n            this.user.displayName = name;\r\n        }\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        }else{\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile, email'})\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commomStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore:ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const storeContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(storeContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                }else{\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {this.token = token;}\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal{\r\n    open: boolean,\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore{\r\n    modal: Modal ={\r\n        open: false,\r\n        body: null\r\n\r\n    }\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction} from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore{\r\n    comments: ChatComment[] = [];\r\n    hubConnection : HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_CHAT_URL +'?activityId=' + activityId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing connection', error));\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                       comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) =>{\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown} from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer (function NavBar() {\r\n    const {userStore : {user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to= '/' exact header>\r\n                    <img src='assets/logo.png' alt='logo' style={{marginRight: 10}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to= '/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to= '/errors' name='Errors' />\r\n                <Menu.Item>\r\n                <Button  as={NavLink} to= '/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='MyProfile' icon='user'/>\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer (function ActivityFilters(){\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return(\r\n        <>\r\n            <Menu vertical size=\"large\" style={{width:'100%', marginTop:'28px'}}>\r\n                <Header icon= 'filter' attached collor='teal' content= 'Filters'/>\r\n                <Menu.Item \r\n                content='All activities'\r\n                active={predicate.has('all')}\r\n                onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                content=\"I`m going\"\r\n                active={predicate.has('isGoing')}\r\n                onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                content=\"I'm hosting\"\r\n                active={predicate.has('isHost')}\r\n                onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n            onChange={(date: Date) => setPredicate('startDate', date as Date)}\r\n            value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading  } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) {\r\n        return null;\r\n    }\r\n    function handleFollow(e: SyntheticEvent, username: string){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                fluid color='teal' \r\n                content={profile.following ? 'Following' : 'Not Following'} \r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading} \r\n                    onClick={(e) => handleFollow(e, profile.username) }\r\n                    />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\nprofile: Profile;\r\n}\r\n\r\n\r\nexport default observer (function ProfileCard({profile} : Props){\r\n\r\n    function truncate(str: string | undefined){\r\n        if (str) {\r\n            return str?.length > 40 ? str?.substring(0, 37) + '...': str;\r\n        }\r\n    }\r\n    return(\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || `/assets/user.png`}/>\r\n                 <Card.Content>\r\n                    <Card.Header>{profile.displayName}</Card.Header>\r\n                    <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Icon name='user'/>\r\n                   {profile.followersCount} followers\r\n                </Card.Content>\r\n                <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { List, Image, Popup } from \"semantic-ui-react\"\r\nimport { Profile } from \"../../../app/models/profile\"\r\nimport ProfileCard from \"../../profiles/ProfileCard\"\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                            size='mini' \r\n                            circular src={attendee.image || '/assets/user.png'} \r\n                            bordered\r\n                            style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}> {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`} >{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are attending this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format (activity.date!, 'dd MMMM yyyy H:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                < Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) =>\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            )}\r\n        </>\r\n    )\r\n})\r\n","import { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size === 0) loadActivities();\r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name : string;\r\n    type?: string;\r\n    label? : string;\r\n}\r\n\r\nexport default function MyTextInpun(props : Props){\r\n    const [field, meta] = useField(props.name)\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {... field } {... props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'> {meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInpun from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer (function LoginForm(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error =>\r\n                setErrors({error: 'Invalid email or password'}))}\r\n            >\r\n                {({handleSubmit, isSubmitting, errors}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\r\n                       <MyTextInpun name='email' placeholder='Email' />\r\n                       <MyTextInpun name='password' placeholder='password' type='password' />\r\n                       <ErrorMessage\r\n                            name='error' render={() =>\r\n                            <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>} />\r\n                       <Button loading={isSubmitting} positive content='Login' type=\"submit\" fluid/>\r\n                    </Form>\r\n                )}\r\n        </Formik>\r\n    )\r\n})","import { Message } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationError({errors}: Props) {\r\n    return(\r\n        <Message error>\r\n            {errors &&(\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) =>(\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInpun from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer (function RegisterForm(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error =>\r\n                setErrors({error}))}\r\n                validationSchema = {Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string().required(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required(),\r\n                })}\r\n            >\r\n                {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                    <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center'/>\r\n                       <MyTextInpun name='displayName' placeholder='Display Name' />\r\n                       <MyTextInpun name='username' placeholder='Username' />\r\n                       <MyTextInpun name='email' placeholder='Email' />\r\n                       <MyTextInpun name='password' placeholder='Password' type='password' />\r\n                       <ErrorMessage\r\n                            name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                      />\r\n                       <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type=\"submit\" fluid/>\r\n                    </Form>\r\n                )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button, Divider } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className=\"masthead\">\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' style={{ marginBottom: 12 }} />\r\n                    Activity Hub\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Global Activity Store!' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!!!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                        <Divider horizontal inverted> Or </Divider>\r\n                        <Button \r\n                            loading={userStore.fbLoading}\r\n                            size='huge'\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true, content= 'Loading...'}: Props) {\r\n    return(\r\n        <Dimmer active= {true} inverted={inverted}>\r\n        <Loader content={content} />\r\n        </ Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name : string;\r\n    rows: number;\r\n    label? : string;\r\n}\r\n\r\nexport default function MyTextArea(props : Props){\r\n    const [field, meta] = useField(props.name)\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {... field } {... props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'> {meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name : string;\r\n    options : any;\r\n    label? : string;\r\n}\r\n\r\nexport default function MySelectInpun(props : Props){\r\n    const [field, meta, helpers] = useField(props.name)\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder\r\n                }\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'> {meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from \"react-datepicker\";\r\n\r\n\r\n\r\n\r\nexport default function MyDateInpun(props : Partial<ReactDatePickerProps>){\r\n    const [field, meta, helpers] = useField(props.name!)\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n            {...field}\r\n            {...props}\r\n            selected={((field.value && new Date(field.value)) || null)}\r\n            onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'> {meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport MyTextInpun from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInpun from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInpun from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\nimport { v4 as uuid } from 'uuid'\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>()\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity!)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid(),\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} >\r\n                        <MyTextInpun name='title' placeholder=\"Title\" />\r\n                        <MyTextArea rows={3} placeholder=\"Description\" name='description' />\r\n                        <MySelectInpun options={categoryOptions} placeholder=\"Category\" name='category' />\r\n                        <MyDateInpun\r\n                            placeholderText=\"Date\"\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM dd yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInpun placeholder=\"City\" name='city' />\r\n                        <MyTextInpun placeholder=\"Venue\" name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated='right'\r\n                            positive type='submit'\r\n                            content='Submit' />\r\n                        <Button\r\n                            as={Link}\r\n                            to='/activities'\r\n                            floated='right'\r\n                            type='button'\r\n                            content='Cancel'\r\n                        />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button\r\n                        loading={loading}\r\n                        onClick={updateAttendance}>Cancel attendance\r\n                    </Button>\r\n                ) : (\r\n                    <Button\r\n                        disabled={activity.isCancelled}\r\n                        loading={loading}\r\n                        onClick={updateAttendance}\r\n                        color='teal'>Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport { formatDistanceToNow } from 'date-fns/esm'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter to submit, SHIFT + enter for new line'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format (activity.date!, 'dd MMM yyyy H:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity : Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity : {attendees, host} }: Props) {\r\n    if (!attendees) {\r\n        return  null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                    {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport {  Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedHeader from \"./ActivitiyDetailedHeader\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSideBar from \"./ActivityDetailedSideBar\";\r\n\r\nexport default observer(function ActivityDetails() {\r\n  const { activityStore } = useStore();\r\n  const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n  const { id } = useParams<{ id: string }>();\r\n\r\n  useEffect(() => {\r\n    if (id) loadActivity(id);\r\n    return () => clearSelectedActivity();\r\n  }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n  if (loadingInitial || !activity) return <LoadingComponent />;\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityDetailedHeader activity={activity} />\r\n        <ActivityDetailedInfo activity={activity}/>\r\n        <ActivityDetailedChat activityId={activity.id}/>\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityDetailedSideBar activity={activity} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n})","import { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            { errors &&\r\n            <ValidationErrors errors={errors}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound(){\r\n    return(\r\n        <Segment placeholder>\r\n            <Header>\r\n                <Icon name='search' />\r\n                Well, we've looked everywhere and could not find this\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                Return to activity page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer (function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return(\r\n        <Container>\r\n            <Header as='h1' content='ServerError'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal'/>\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer (function ModalContainer(){\r\n    const {modalStore} = useStore();\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Formik, Form } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useStore } from '../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { Button} from 'semantic-ui-react';\r\nimport MyTextInpun from '../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\n\r\ninterface Props{\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\nexport default observer (function ProfileEditForm({setEditMode}: Props){\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    \r\n    return (\r\n        <Formik\r\n        initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n        onSubmit={values => {\r\n            updateProfile(values).then(() => {\r\n                setEditMode(false);\r\n            })\r\n        }}\r\n        validationSchema={Yup.object({\r\n            displayName: Yup.string().required()\r\n        })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInpun placeholder='Display Name' name='displayName'/>\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio'/>\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </ Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}> {profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer (function ProfileFollowings(){\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return(\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                    floated='left' \r\n                    icon='user' \r\n                    content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile}/>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import {Cropper} from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props{\r\n    imagePreview: string;\r\n    setCropper:(cropper: Cropper) => void;\r\n}\r\n\r\nexport  default function PhotoWidgetCropper({imagePreview, setCropper}: Props){\r\n    return(\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge'/>\r\n            <Header content='Drop image here'/>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props{\r\n    loading: boolean;\r\n    uploadPhoto:(file: Blob) => void;\r\n\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto} : Props){\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop(){\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() =>{\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    },[files])\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo'/>\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image'/>\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload'/>\r\n                {files && files.length > 0 &&\r\n                <>\r\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\r\n                <Button.Group widths={2}>\r\n                    <Button loading={loading} onClick={onCrop} positive icon='check'/>\r\n                    <Button disabled={loading} onClick={() => setFiles([])}  icon='close'/>\r\n                </Button.Group>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob){\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser &&\r\n                                    <Button.Group>\r\n                                        <Button\r\n                                            basic\r\n                                            color='green'\r\n                                            content='Main'\r\n                                            name={'main' + photo.id}\r\n                                            disabled={photo.isMain}\r\n                                            loading={target === 'main' + photo.id && loading}\r\n                                            onClick={ e => handleSetMainPhoto(photo, e)}\r\n                                        />\r\n                                        <Button\r\n                                            basic color='red'\r\n                                            icon='trash'\r\n                                            loading={target === photo.id && loading}\r\n                                            onClick={ e => handleDeletePhoto(photo, e)}\r\n                                            disabled={photo.isMain}\r\n                                            name={photo.id}\r\n                                            />\r\n                                    </Button.Group>\r\n                                    }\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilesPhotos from \"./ProfilesPhotos\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer (function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilesPhotos profile={profile}/>},\r\n        {menuItem: 'Events', render: () => <Tab.Pane> Events Content</Tab.Pane>},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\r\n    ];\r\n\r\n    return(\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition= 'right'\r\n            panes={panes}\r\n            onTabChange={(e, data) =>  profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport {Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponents\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer (function ProfilePage(){\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n    \r\n    if (loadingProfile) {\r\n        return <LoadingComponent content='Loading profile ...'/>\r\n    }\r\n    \r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                <>\r\n                <ProfileHeader profile={profile} />\r\n                <ProfileContent profile={profile} />\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps{\r\n component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any> ;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props){\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return(\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props}/> : <Redirect to='/'/>}\r\n        />\r\n    )\r\n}","\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './navBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport { useEffect } from 'react';\r\nimport LoadingComponent from './LoadingComponents';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    }else{\r\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) {\r\n    return <LoadingComponent content='App is not loading' />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n              <Switch>\r\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute path='/errors' component={TestErrors} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, storeContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport {createBrowserHistory} from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <storeContext.Provider value= {store}>\r\n    <Router history={history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </storeContext.Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}